// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DotNetRetry.Acceptance.Tests.Scenarios.Sequential.FiniteTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "Finite")]
    public partial class FiniteRetriesFeature : Xunit.IClassFixture<FiniteRetriesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Finite.feature"
#line hidden
        
        public FiniteRetriesFeature(FiniteRetriesFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Finite retries", "\tIn order to test sequential retry policy\r\n\tAs using a finite algorithm\r\n\tI want " +
                    "to verify the number of attempts and time took to retry an operation", ProgrammingLanguage.CSharp, new string[] {
                        "Finite"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Execute operation errorless without retrying")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Execute operation errorless without retrying")]
        public virtual void ExecuteOperationErrorlessWithoutRetrying()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute operation errorless without retrying", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have entered a successfull non-returnable operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("I have entered 3 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.When("I attempt to run it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.Then("no retry attempts should be made", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Zero attempts throws exception")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Zero attempts throws exception")]
        public virtual void ZeroAttemptsThrowsException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Zero attempts throws exception", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given("I have entered a successfull non-returnable operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 15
 testRunner.And("I have entered 0 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.When("I setup rule configuration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
 testRunner.Then("ArgumentOutOfRangeException is thrown when attempts is less than 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Zero time throws exception")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Zero time throws exception")]
        public virtual void ZeroTimeThrowsException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Zero time throws exception", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("I have entered a successfull non-returnable operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
 testRunner.And("I have entered 10 attempts for 0 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
 testRunner.When("I setup rule configuration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
 testRunner.Then("ArgumentOutOfRangeException is thrown when time is less than 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Execute failing operation exhausts 1 attempt")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Execute failing operation exhausts 1 attempt")]
        public virtual void ExecuteFailingOperationExhausts1Attempt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute failing operation exhausts 1 attempt", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.Given("I have entered a failing non-returnable operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
 testRunner.And("I have entered 1 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
 testRunner.When("I attempt to run it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
 testRunner.Then("exactly 1 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 30
 testRunner.And("took less than 100 milliseconds in total because of overhead", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
 testRunner.And("OnFailure will be dispatched exactly 1 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.And("OnBeforeRetry will be dispatched exactly 1 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
 testRunner.And("OnAfterRetry will be dispatched exactly 1 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
 testRunner.And("AggregateException will be thrown with exactly 1 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Execute failing operation exhausts 2 attempts")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Execute failing operation exhausts 2 attempts")]
        public virtual void ExecuteFailingOperationExhausts2Attempts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute failing operation exhausts 2 attempts", ((string[])(null)));
#line 36
this.ScenarioSetup(scenarioInfo);
#line 37
 testRunner.Given("I have entered a failing non-returnable operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 38
 testRunner.And("I have entered 2 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
 testRunner.When("I attempt to run it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
 testRunner.Then("exactly 2 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 41
 testRunner.And("took around 100 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
 testRunner.And("OnFailure will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
 testRunner.And("OnBeforeRetry will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
 testRunner.And("OnAfterRetry will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
 testRunner.And("AggregateException will be thrown with exactly 2 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Execute failing operation exhausts 3 attempts")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Execute failing operation exhausts 3 attempts")]
        public virtual void ExecuteFailingOperationExhausts3Attempts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute failing operation exhausts 3 attempts", ((string[])(null)));
#line 47
this.ScenarioSetup(scenarioInfo);
#line 48
 testRunner.Given("I have entered a failing non-returnable operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 49
 testRunner.And("I have entered 3 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 50
 testRunner.When("I attempt to run it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 51
 testRunner.Then("exactly 3 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 52
 testRunner.And("took around 200 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
 testRunner.And("OnFailure will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
 testRunner.And("OnBeforeRetry will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 55
 testRunner.And("OnAfterRetry will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
 testRunner.And("AggregateException will be thrown with exactly 3 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Execute failing operation exhausts 4 attempts")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Execute failing operation exhausts 4 attempts")]
        public virtual void ExecuteFailingOperationExhausts4Attempts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute failing operation exhausts 4 attempts", ((string[])(null)));
#line 58
this.ScenarioSetup(scenarioInfo);
#line 59
 testRunner.Given("I have entered a failing non-returnable operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 60
 testRunner.And("I have entered 4 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
 testRunner.When("I attempt to run it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 62
 testRunner.Then("exactly 4 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 63
 testRunner.And("took around 300 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
 testRunner.And("OnFailure will be dispatched exactly 4 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
 testRunner.And("OnBeforeRetry will be dispatched exactly 4 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 66
 testRunner.And("OnAfterRetry will be dispatched exactly 4 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
 testRunner.And("AggregateException will be thrown with exactly 4 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Execute failing operation exhausts 5 attempts")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Execute failing operation exhausts 5 attempts")]
        public virtual void ExecuteFailingOperationExhausts5Attempts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute failing operation exhausts 5 attempts", ((string[])(null)));
#line 69
this.ScenarioSetup(scenarioInfo);
#line 70
 testRunner.Given("I have entered a failing non-returnable operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 71
 testRunner.And("I have entered 5 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
 testRunner.When("I attempt to run it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 73
 testRunner.Then("exactly 5 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 74
 testRunner.And("took around 400 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
 testRunner.And("OnFailure will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
 testRunner.And("OnBeforeRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
 testRunner.And("OnAfterRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
 testRunner.And("AggregateException will be thrown with exactly 5 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Execute failing operation exhausts 6 attempts")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Execute failing operation exhausts 6 attempts")]
        public virtual void ExecuteFailingOperationExhausts6Attempts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute failing operation exhausts 6 attempts", ((string[])(null)));
#line 80
this.ScenarioSetup(scenarioInfo);
#line 81
 testRunner.Given("I have entered a failing non-returnable operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 82
 testRunner.And("I have entered 6 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 83
 testRunner.When("I attempt to run it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 84
 testRunner.Then("exactly 6 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 85
 testRunner.And("took around 500 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
 testRunner.And("OnFailure will be dispatched exactly 6 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
 testRunner.And("OnBeforeRetry will be dispatched exactly 6 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
 testRunner.And("OnAfterRetry will be dispatched exactly 6 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 89
 testRunner.And("AggregateException will be thrown with exactly 6 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Execute failing operation exhausts 7 attempts")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Execute failing operation exhausts 7 attempts")]
        public virtual void ExecuteFailingOperationExhausts7Attempts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute failing operation exhausts 7 attempts", ((string[])(null)));
#line 91
this.ScenarioSetup(scenarioInfo);
#line 92
 testRunner.Given("I have entered a failing non-returnable operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 93
 testRunner.And("I have entered 7 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
 testRunner.When("I attempt to run it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 95
 testRunner.Then("exactly 7 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 96
 testRunner.And("took around 600 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 97
 testRunner.And("OnFailure will be dispatched exactly 7 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
 testRunner.And("OnBeforeRetry will be dispatched exactly 7 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 99
 testRunner.And("OnAfterRetry will be dispatched exactly 7 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 100
 testRunner.And("AggregateException will be thrown with exactly 7 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Execute failing operation exhausts 8 attempts")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Execute failing operation exhausts 8 attempts")]
        public virtual void ExecuteFailingOperationExhausts8Attempts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute failing operation exhausts 8 attempts", ((string[])(null)));
#line 102
this.ScenarioSetup(scenarioInfo);
#line 103
 testRunner.Given("I have entered a failing non-returnable operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 104
 testRunner.And("I have entered 8 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 105
 testRunner.When("I attempt to run it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 106
 testRunner.Then("exactly 8 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 107
 testRunner.And("took around 700 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 108
 testRunner.And("OnFailure will be dispatched exactly 8 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 109
 testRunner.And("OnBeforeRetry will be dispatched exactly 8 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 110
 testRunner.And("OnAfterRetry will be dispatched exactly 8 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 111
 testRunner.And("AggregateException will be thrown with exactly 8 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Execute failing operation exhausts 9 attempts")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Execute failing operation exhausts 9 attempts")]
        public virtual void ExecuteFailingOperationExhausts9Attempts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute failing operation exhausts 9 attempts", ((string[])(null)));
#line 113
this.ScenarioSetup(scenarioInfo);
#line 114
 testRunner.Given("I have entered a failing non-returnable operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 115
 testRunner.And("I have entered 9 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 116
 testRunner.When("I attempt to run it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 117
 testRunner.Then("exactly 9 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 118
 testRunner.And("took around 800 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 119
 testRunner.And("OnFailure will be dispatched exactly 9 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 120
 testRunner.And("OnBeforeRetry will be dispatched exactly 9 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 121
 testRunner.And("OnAfterRetry will be dispatched exactly 9 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 122
 testRunner.And("AggregateException will be thrown with exactly 9 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Execute failing operation exhausts 10 attempts")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Execute failing operation exhausts 10 attempts")]
        public virtual void ExecuteFailingOperationExhausts10Attempts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute failing operation exhausts 10 attempts", ((string[])(null)));
#line 124
this.ScenarioSetup(scenarioInfo);
#line 125
 testRunner.Given("I have entered a failing non-returnable operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 126
 testRunner.And("I have entered 10 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 127
 testRunner.When("I attempt to run it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 128
 testRunner.Then("exactly 10 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 129
 testRunner.And("took around 900 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 130
 testRunner.And("OnFailure will be dispatched exactly 10 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 131
 testRunner.And("OnBeforeRetry will be dispatched exactly 10 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 132
 testRunner.And("OnAfterRetry will be dispatched exactly 10 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 133
 testRunner.And("AggregateException will be thrown with exactly 10 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Execute failing operation to succeed at 1 try of overall 1")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Execute failing operation to succeed at 1 try of overall 1")]
        public virtual void ExecuteFailingOperationToSucceedAt1TryOfOverall1()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute failing operation to succeed at 1 try of overall 1", ((string[])(null)));
#line 135
this.ScenarioSetup(scenarioInfo);
#line 136
 testRunner.Given("I have entered a failing non-returnable operation which succeeds at 1 try", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 137
 testRunner.And("I have entered 2 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 138
 testRunner.When("I attempt to run it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 139
 testRunner.Then("no retry attempts should be made", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Execute failing operation to succeed at 2 try of overall 2")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Execute failing operation to succeed at 2 try of overall 2")]
        public virtual void ExecuteFailingOperationToSucceedAt2TryOfOverall2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute failing operation to succeed at 2 try of overall 2", ((string[])(null)));
#line 141
this.ScenarioSetup(scenarioInfo);
#line 142
 testRunner.Given("I have entered a failing non-returnable operation which succeeds at 2 try", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 143
 testRunner.And("I have entered 2 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 144
 testRunner.When("I attempt to run it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 145
 testRunner.Then("exactly 1 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 146
 testRunner.And("took around 100 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 147
 testRunner.And("OnFailure will be dispatched exactly 1 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 148
 testRunner.And("OnBeforeRetry will be dispatched exactly 1 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 149
 testRunner.And("OnAfterRetry will be dispatched exactly 1 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 150
 testRunner.And("no AggregateException is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Execute failing operation to succeed at 1 try of overall 3")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Execute failing operation to succeed at 1 try of overall 3")]
        public virtual void ExecuteFailingOperationToSucceedAt1TryOfOverall3()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute failing operation to succeed at 1 try of overall 3", ((string[])(null)));
#line 152
this.ScenarioSetup(scenarioInfo);
#line 153
 testRunner.Given("I have entered a failing non-returnable operation which succeeds at 1 try", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 154
 testRunner.And("I have entered 3 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 155
 testRunner.When("I attempt to run it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 156
 testRunner.Then("no retry attempts should be made", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Execute failing operation to succeed at 2 try of overall 3")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Execute failing operation to succeed at 2 try of overall 3")]
        public virtual void ExecuteFailingOperationToSucceedAt2TryOfOverall3()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute failing operation to succeed at 2 try of overall 3", ((string[])(null)));
#line 158
this.ScenarioSetup(scenarioInfo);
#line 159
 testRunner.Given("I have entered a failing non-returnable operation which succeeds at 2 try", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 160
 testRunner.And("I have entered 3 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 161
 testRunner.When("I attempt to run it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 162
 testRunner.Then("exactly 1 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 163
 testRunner.And("took around 100 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 164
 testRunner.And("OnFailure will be dispatched exactly 1 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 165
 testRunner.And("OnBeforeRetry will be dispatched exactly 1 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 166
 testRunner.And("OnAfterRetry will be dispatched exactly 1 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 167
 testRunner.And("no AggregateException is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Execute failing operation to succeed at 3 try of overall 3")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Execute failing operation to succeed at 3 try of overall 3")]
        public virtual void ExecuteFailingOperationToSucceedAt3TryOfOverall3()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute failing operation to succeed at 3 try of overall 3", ((string[])(null)));
#line 169
this.ScenarioSetup(scenarioInfo);
#line 170
 testRunner.Given("I have entered a failing non-returnable operation which succeeds at 3 try", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 171
 testRunner.And("I have entered 3 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 172
 testRunner.When("I attempt to run it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 173
 testRunner.Then("exactly 2 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 174
 testRunner.And("took around 200 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 175
 testRunner.And("OnFailure will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 176
 testRunner.And("OnBeforeRetry will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 177
 testRunner.And("OnAfterRetry will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 178
 testRunner.And("no AggregateException is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Execute failing operation to succeed at 1 try of overall 4")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Execute failing operation to succeed at 1 try of overall 4")]
        public virtual void ExecuteFailingOperationToSucceedAt1TryOfOverall4()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute failing operation to succeed at 1 try of overall 4", ((string[])(null)));
#line 180
this.ScenarioSetup(scenarioInfo);
#line 181
 testRunner.Given("I have entered a failing non-returnable operation which succeeds at 1 try", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 182
 testRunner.And("I have entered 4 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 183
 testRunner.When("I attempt to run it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 184
 testRunner.Then("no retry attempts should be made", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Execute failing operation to succeed at 2 try of overall 4")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Execute failing operation to succeed at 2 try of overall 4")]
        public virtual void ExecuteFailingOperationToSucceedAt2TryOfOverall4()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute failing operation to succeed at 2 try of overall 4", ((string[])(null)));
#line 186
this.ScenarioSetup(scenarioInfo);
#line 187
 testRunner.Given("I have entered a failing non-returnable operation which succeeds at 2 try", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 188
 testRunner.And("I have entered 4 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 189
 testRunner.When("I attempt to run it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 190
 testRunner.Then("exactly 1 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 191
 testRunner.And("took around 100 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 192
 testRunner.And("OnFailure will be dispatched exactly 1 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 193
 testRunner.And("OnBeforeRetry will be dispatched exactly 1 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 194
 testRunner.And("OnAfterRetry will be dispatched exactly 1 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 195
 testRunner.And("no AggregateException is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Execute failing operation to succeed at 3 try of overall 4")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Execute failing operation to succeed at 3 try of overall 4")]
        public virtual void ExecuteFailingOperationToSucceedAt3TryOfOverall4()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute failing operation to succeed at 3 try of overall 4", ((string[])(null)));
#line 197
this.ScenarioSetup(scenarioInfo);
#line 198
 testRunner.Given("I have entered a failing non-returnable operation which succeeds at 3 try", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 199
 testRunner.And("I have entered 4 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 200
 testRunner.When("I attempt to run it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 201
 testRunner.Then("exactly 2 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 202
 testRunner.And("took around 200 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 203
 testRunner.And("OnFailure will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 204
 testRunner.And("OnBeforeRetry will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 205
 testRunner.And("OnAfterRetry will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 206
 testRunner.And("no AggregateException is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Execute failing operation to succeed at 4 try of overall 4")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Execute failing operation to succeed at 4 try of overall 4")]
        public virtual void ExecuteFailingOperationToSucceedAt4TryOfOverall4()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute failing operation to succeed at 4 try of overall 4", ((string[])(null)));
#line 208
this.ScenarioSetup(scenarioInfo);
#line 209
 testRunner.Given("I have entered a failing non-returnable operation which succeeds at 4 try", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 210
 testRunner.And("I have entered 4 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 211
 testRunner.When("I attempt to run it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 212
 testRunner.Then("exactly 3 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 213
 testRunner.And("took around 300 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 214
 testRunner.And("OnFailure will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 215
 testRunner.And("OnBeforeRetry will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 216
 testRunner.And("OnAfterRetry will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 217
 testRunner.And("no AggregateException is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Execute failing operation to succeed at 1 try of overall 5")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Execute failing operation to succeed at 1 try of overall 5")]
        public virtual void ExecuteFailingOperationToSucceedAt1TryOfOverall5()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute failing operation to succeed at 1 try of overall 5", ((string[])(null)));
#line 219
this.ScenarioSetup(scenarioInfo);
#line 220
 testRunner.Given("I have entered a failing non-returnable operation which succeeds at 1 try", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 221
 testRunner.And("I have entered 5 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 222
 testRunner.When("I attempt to run it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 223
 testRunner.Then("no retry attempts should be made", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Execute failing operation to succeed at 2 try of overall 5")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Execute failing operation to succeed at 2 try of overall 5")]
        public virtual void ExecuteFailingOperationToSucceedAt2TryOfOverall5()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute failing operation to succeed at 2 try of overall 5", ((string[])(null)));
#line 225
this.ScenarioSetup(scenarioInfo);
#line 226
 testRunner.Given("I have entered a failing non-returnable operation which succeeds at 2 try", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 227
 testRunner.And("I have entered 5 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 228
 testRunner.When("I attempt to run it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 229
 testRunner.Then("exactly 1 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 230
 testRunner.And("took around 100 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 231
 testRunner.And("OnFailure will be dispatched exactly 1 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 232
 testRunner.And("OnBeforeRetry will be dispatched exactly 1 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 233
 testRunner.And("OnAfterRetry will be dispatched exactly 1 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 234
 testRunner.And("no AggregateException is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Execute failing operation to succeed at 3 try of overall 5")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Execute failing operation to succeed at 3 try of overall 5")]
        public virtual void ExecuteFailingOperationToSucceedAt3TryOfOverall5()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute failing operation to succeed at 3 try of overall 5", ((string[])(null)));
#line 236
this.ScenarioSetup(scenarioInfo);
#line 237
 testRunner.Given("I have entered a failing non-returnable operation which succeeds at 3 try", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 238
 testRunner.And("I have entered 5 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 239
 testRunner.When("I attempt to run it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 240
 testRunner.Then("exactly 2 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 241
 testRunner.And("took around 200 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 242
 testRunner.And("OnFailure will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 243
 testRunner.And("OnBeforeRetry will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 244
 testRunner.And("OnAfterRetry will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 245
 testRunner.And("no AggregateException is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Execute failing operation to succeed at 4 try of overall 5")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Execute failing operation to succeed at 4 try of overall 5")]
        public virtual void ExecuteFailingOperationToSucceedAt4TryOfOverall5()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute failing operation to succeed at 4 try of overall 5", ((string[])(null)));
#line 247
this.ScenarioSetup(scenarioInfo);
#line 248
 testRunner.Given("I have entered a failing non-returnable operation which succeeds at 4 try", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 249
 testRunner.And("I have entered 5 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 250
 testRunner.When("I attempt to run it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 251
 testRunner.Then("exactly 3 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 252
 testRunner.And("took around 300 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 253
 testRunner.And("OnFailure will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 254
 testRunner.And("OnBeforeRetry will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 255
 testRunner.And("OnAfterRetry will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 256
 testRunner.And("no AggregateException is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Execute failing operation to succeed at 5 try of overall 5")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Execute failing operation to succeed at 5 try of overall 5")]
        public virtual void ExecuteFailingOperationToSucceedAt5TryOfOverall5()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute failing operation to succeed at 5 try of overall 5", ((string[])(null)));
#line 258
this.ScenarioSetup(scenarioInfo);
#line 259
 testRunner.Given("I have entered a failing non-returnable operation which succeeds at 5 try", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 260
 testRunner.And("I have entered 5 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 261
 testRunner.When("I attempt to run it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 262
 testRunner.Then("exactly 4 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 263
 testRunner.And("took around 400 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 264
 testRunner.And("OnFailure will be dispatched exactly 4 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 265
 testRunner.And("OnBeforeRetry will be dispatched exactly 4 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 266
 testRunner.And("OnAfterRetry will be dispatched exactly 4 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 267
 testRunner.And("no AggregateException is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Execute failing operation to succeed at 1 try of overall 10")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Execute failing operation to succeed at 1 try of overall 10")]
        public virtual void ExecuteFailingOperationToSucceedAt1TryOfOverall10()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute failing operation to succeed at 1 try of overall 10", ((string[])(null)));
#line 269
this.ScenarioSetup(scenarioInfo);
#line 270
 testRunner.Given("I have entered a failing non-returnable operation which succeeds at 1 try", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 271
 testRunner.And("I have entered 10 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 272
 testRunner.When("I attempt to run it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 273
 testRunner.Then("no retry attempts should be made", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Execute failing operation to succeed at 2 try of overall 10")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Execute failing operation to succeed at 2 try of overall 10")]
        public virtual void ExecuteFailingOperationToSucceedAt2TryOfOverall10()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute failing operation to succeed at 2 try of overall 10", ((string[])(null)));
#line 275
this.ScenarioSetup(scenarioInfo);
#line 276
 testRunner.Given("I have entered a failing non-returnable operation which succeeds at 2 try", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 277
 testRunner.And("I have entered 10 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 278
 testRunner.When("I attempt to run it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 279
 testRunner.Then("exactly 1 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 280
 testRunner.And("took around 100 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 281
 testRunner.And("OnFailure will be dispatched exactly 1 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 282
 testRunner.And("OnBeforeRetry will be dispatched exactly 1 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 283
 testRunner.And("OnAfterRetry will be dispatched exactly 1 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 284
 testRunner.And("no AggregateException is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Execute failing operation to succeed at 3 try of overall 10")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Execute failing operation to succeed at 3 try of overall 10")]
        public virtual void ExecuteFailingOperationToSucceedAt3TryOfOverall10()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute failing operation to succeed at 3 try of overall 10", ((string[])(null)));
#line 286
this.ScenarioSetup(scenarioInfo);
#line 287
 testRunner.Given("I have entered a failing non-returnable operation which succeeds at 3 try", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 288
 testRunner.And("I have entered 10 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 289
 testRunner.When("I attempt to run it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 290
 testRunner.Then("exactly 2 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 291
 testRunner.And("took around 200 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 292
 testRunner.And("OnFailure will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 293
 testRunner.And("OnBeforeRetry will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 294
 testRunner.And("OnAfterRetry will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 295
 testRunner.And("no AggregateException is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Execute failing operation to succeed at 4 try of overall 10")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Execute failing operation to succeed at 4 try of overall 10")]
        public virtual void ExecuteFailingOperationToSucceedAt4TryOfOverall10()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute failing operation to succeed at 4 try of overall 10", ((string[])(null)));
#line 297
this.ScenarioSetup(scenarioInfo);
#line 298
 testRunner.Given("I have entered a failing non-returnable operation which succeeds at 4 try", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 299
 testRunner.And("I have entered 10 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 300
 testRunner.When("I attempt to run it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 301
 testRunner.Then("exactly 3 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 302
 testRunner.And("took around 300 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 303
 testRunner.And("OnFailure will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 304
 testRunner.And("OnBeforeRetry will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 305
 testRunner.And("OnAfterRetry will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 306
 testRunner.And("no AggregateException is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Execute failing operation to succeed at 5 try of overall 10")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Execute failing operation to succeed at 5 try of overall 10")]
        public virtual void ExecuteFailingOperationToSucceedAt5TryOfOverall10()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute failing operation to succeed at 5 try of overall 10", ((string[])(null)));
#line 308
this.ScenarioSetup(scenarioInfo);
#line 309
 testRunner.Given("I have entered a failing non-returnable operation which succeeds at 5 try", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 310
 testRunner.And("I have entered 10 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 311
 testRunner.When("I attempt to run it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 312
 testRunner.Then("exactly 4 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 313
 testRunner.And("took around 400 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 314
 testRunner.And("OnFailure will be dispatched exactly 4 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 315
 testRunner.And("OnBeforeRetry will be dispatched exactly 4 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 316
 testRunner.And("OnAfterRetry will be dispatched exactly 4 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 317
 testRunner.And("no AggregateException is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Execute failing operation to succeed at 6 try of overall 10")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Execute failing operation to succeed at 6 try of overall 10")]
        public virtual void ExecuteFailingOperationToSucceedAt6TryOfOverall10()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute failing operation to succeed at 6 try of overall 10", ((string[])(null)));
#line 319
this.ScenarioSetup(scenarioInfo);
#line 320
 testRunner.Given("I have entered a failing non-returnable operation which succeeds at 6 try", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 321
 testRunner.And("I have entered 10 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 322
 testRunner.When("I attempt to run it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 323
 testRunner.Then("exactly 5 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 324
 testRunner.And("took around 500 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 325
 testRunner.And("OnFailure will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 326
 testRunner.And("OnBeforeRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 327
 testRunner.And("OnAfterRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 328
 testRunner.And("no AggregateException is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Execute failing operation to succeed at 7 try of overall 10")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Execute failing operation to succeed at 7 try of overall 10")]
        public virtual void ExecuteFailingOperationToSucceedAt7TryOfOverall10()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute failing operation to succeed at 7 try of overall 10", ((string[])(null)));
#line 330
this.ScenarioSetup(scenarioInfo);
#line 331
 testRunner.Given("I have entered a failing non-returnable operation which succeeds at 7 try", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 332
 testRunner.And("I have entered 10 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 333
 testRunner.When("I attempt to run it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 334
 testRunner.Then("exactly 6 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 335
 testRunner.And("took around 600 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 336
 testRunner.And("OnFailure will be dispatched exactly 6 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 337
 testRunner.And("OnBeforeRetry will be dispatched exactly 6 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 338
 testRunner.And("OnAfterRetry will be dispatched exactly 6 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 339
 testRunner.And("no AggregateException is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Execute failing operation to succeed at 8 try of overall 10")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Execute failing operation to succeed at 8 try of overall 10")]
        public virtual void ExecuteFailingOperationToSucceedAt8TryOfOverall10()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute failing operation to succeed at 8 try of overall 10", ((string[])(null)));
#line 341
this.ScenarioSetup(scenarioInfo);
#line 342
 testRunner.Given("I have entered a failing non-returnable operation which succeeds at 8 try", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 343
 testRunner.And("I have entered 10 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 344
 testRunner.When("I attempt to run it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 345
 testRunner.Then("exactly 7 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 346
 testRunner.And("took around 700 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 347
 testRunner.And("OnFailure will be dispatched exactly 7 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 348
 testRunner.And("OnBeforeRetry will be dispatched exactly 7 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 349
 testRunner.And("OnAfterRetry will be dispatched exactly 7 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 350
 testRunner.And("no AggregateException is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Execute failing operation to succeed at 9 try of overall 10")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Execute failing operation to succeed at 9 try of overall 10")]
        public virtual void ExecuteFailingOperationToSucceedAt9TryOfOverall10()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute failing operation to succeed at 9 try of overall 10", ((string[])(null)));
#line 352
this.ScenarioSetup(scenarioInfo);
#line 353
 testRunner.Given("I have entered a failing non-returnable operation which succeeds at 9 try", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 354
 testRunner.And("I have entered 10 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 355
 testRunner.When("I attempt to run it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 356
 testRunner.Then("exactly 8 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 357
 testRunner.And("took around 800 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 358
 testRunner.And("OnFailure will be dispatched exactly 8 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 359
 testRunner.And("OnBeforeRetry will be dispatched exactly 8 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 360
 testRunner.And("OnAfterRetry will be dispatched exactly 8 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 361
 testRunner.And("no AggregateException is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Execute failing operation to succeed at 10 try of overall 10")]
        [Xunit.TraitAttribute("FeatureTitle", "Finite retries")]
        [Xunit.TraitAttribute("Description", "Execute failing operation to succeed at 10 try of overall 10")]
        public virtual void ExecuteFailingOperationToSucceedAt10TryOfOverall10()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute failing operation to succeed at 10 try of overall 10", ((string[])(null)));
#line 363
this.ScenarioSetup(scenarioInfo);
#line 364
 testRunner.Given("I have entered a failing non-returnable operation which succeeds at 10 try", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 365
 testRunner.And("I have entered 10 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 366
 testRunner.When("I attempt to run it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 367
 testRunner.Then("exactly 9 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 368
 testRunner.And("took around 900 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 369
 testRunner.And("OnFailure will be dispatched exactly 9 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 370
 testRunner.And("OnBeforeRetry will be dispatched exactly 9 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 371
 testRunner.And("OnAfterRetry will be dispatched exactly 9 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 372
 testRunner.And("no AggregateException is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                FiniteRetriesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                FiniteRetriesFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
