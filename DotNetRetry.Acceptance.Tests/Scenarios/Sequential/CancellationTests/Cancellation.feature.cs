// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DotNetRetry.Acceptance.Tests.Scenarios.Sequential.CancellationTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "Cancellation")]
    public partial class CancellableRetriesFeature : Xunit.IClassFixture<CancellableRetriesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Cancellation.feature"
#line hidden
        
        public CancellableRetriesFeature(CancellableRetriesFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Cancellable retries", "\tIn order to test cancellation rules\r\n\tAs using a finite algorithm\r\n\tI want to be" +
                    " verify the number of retries and time took when cancellation rules applied", ProgrammingLanguage.CSharp, new string[] {
                        "Cancellation"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel finite action on ArgumentException")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel finite action on ArgumentException")]
        public virtual void CancelFiniteActionOnArgumentException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel finite action on ArgumentException", ((string[])(null)));
#line 9
this.ScenarioSetup(scenarioInfo);
#line 10
 testRunner.Given("I have entered a failing non-returnable operation which fails at step 2 with Argu" +
                    "mentException and all others are Exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 11
 testRunner.And("I have entered 5 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
 testRunner.When("I setup up to fail on ArgumentException for sequential cancellation policy and at" +
                    "tempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
 testRunner.Then("exactly 1 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 14
 testRunner.And("took around 100 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.And("OnFailure will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.And("OnBeforeRetry will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.And("OnAfterRetry will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
 testRunner.And("AggregateException will be thrown with exactly 2 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel finite action on ArgumentOutOfRangeException")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel finite action on ArgumentOutOfRangeException")]
        public virtual void CancelFiniteActionOnArgumentOutOfRangeException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel finite action on ArgumentOutOfRangeException", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
 testRunner.Given("I have entered a failing non-returnable operation which fails at step 3 with Argu" +
                    "mentOutOfRangeException and all others are Exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
 testRunner.And("I have entered 5 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
 testRunner.When("I setup up to fail on ArgumentOutOfRangeException for sequential cancellation pol" +
                    "icy and attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
 testRunner.Then("exactly 2 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 25
 testRunner.And("took around 200 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.And("OnFailure will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
 testRunner.And("OnBeforeRetry will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
 testRunner.And("OnAfterRetry will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
 testRunner.And("AggregateException will be thrown with exactly 3 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel finite action on NullReferenceException")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel finite action on NullReferenceException")]
        public virtual void CancelFiniteActionOnNullReferenceException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel finite action on NullReferenceException", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given("I have entered a failing non-returnable operation which fails at step 4 with Null" +
                    "ReferenceException and all others are Exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
 testRunner.And("I have entered 5 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
 testRunner.When("I setup up to fail on NullReferenceException for sequential cancellation policy a" +
                    "nd attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 35
 testRunner.Then("exactly 3 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 36
 testRunner.And("took around 300 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
 testRunner.And("OnFailure will be dispatched exactly 4 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
 testRunner.And("OnBeforeRetry will be dispatched exactly 4 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
 testRunner.And("OnAfterRetry will be dispatched exactly 4 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
 testRunner.And("AggregateException will be thrown with exactly 4 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel finite action on Exception")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel finite action on Exception")]
        public virtual void CancelFiniteActionOnException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel finite action on Exception", ((string[])(null)));
#line 42
this.ScenarioSetup(scenarioInfo);
#line 43
 testRunner.Given("I have entered a failing non-returnable operation which fails at step 2 with Exce" +
                    "ption and all others are ArgumentException", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 44
 testRunner.And("I have entered 5 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
 testRunner.When("I setup up to fail on Exception for sequential cancellation policy and attempt to" +
                    " run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 46
 testRunner.Then("exactly 1 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 47
 testRunner.And("took around 100 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
 testRunner.And("OnFailure will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 49
 testRunner.And("OnBeforeRetry will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 50
 testRunner.And("OnAfterRetry will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
 testRunner.And("AggregateException will be thrown with exactly 2 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Does not cancel finite action on ArgumentException")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Does not cancel finite action on ArgumentException")]
        public virtual void DoesNotCancelFiniteActionOnArgumentException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does not cancel finite action on ArgumentException", ((string[])(null)));
#line 54
this.ScenarioSetup(scenarioInfo);
#line 55
 testRunner.Given("I have entered a failing non-returnable operation which fails at step 2 with Argu" +
                    "mentOutOfRangeException and all others are Exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 56
 testRunner.And("I have entered 5 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
 testRunner.When("I setup up to fail on ArgumentException for sequential cancellation policy and at" +
                    "tempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 58
 testRunner.Then("exactly 5 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 59
 testRunner.And("took around 400 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
 testRunner.And("OnFailure will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
 testRunner.And("OnBeforeRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
 testRunner.And("OnAfterRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
 testRunner.And("AggregateException will be thrown with exactly 5 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Does not cancel finite action on ArgumentOutOfRangeException")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Does not cancel finite action on ArgumentOutOfRangeException")]
        public virtual void DoesNotCancelFiniteActionOnArgumentOutOfRangeException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does not cancel finite action on ArgumentOutOfRangeException", ((string[])(null)));
#line 65
this.ScenarioSetup(scenarioInfo);
#line 66
 testRunner.Given("I have entered a failing non-returnable operation which fails at step 2 with Argu" +
                    "mentException and all others are Exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 67
 testRunner.And("I have entered 5 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
 testRunner.When("I setup up to fail on ArgumentOutOfRangeException for sequential cancellation pol" +
                    "icy and attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 69
 testRunner.Then("exactly 5 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 70
 testRunner.And("took around 400 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
 testRunner.And("OnFailure will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
 testRunner.And("OnBeforeRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 73
 testRunner.And("OnAfterRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
 testRunner.And("AggregateException will be thrown with exactly 5 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Does not cancel finite action on NullReferenceException")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Does not cancel finite action on NullReferenceException")]
        public virtual void DoesNotCancelFiniteActionOnNullReferenceException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does not cancel finite action on NullReferenceException", ((string[])(null)));
#line 76
this.ScenarioSetup(scenarioInfo);
#line 77
 testRunner.Given("I have entered a failing non-returnable operation which fails at step 2 with Argu" +
                    "mentOutOfRangeException and all others are Exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 78
 testRunner.And("I have entered 5 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 79
 testRunner.When("I setup up to fail on NullReferenceException for sequential cancellation policy a" +
                    "nd attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 80
 testRunner.Then("exactly 5 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 81
 testRunner.And("took around 400 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
 testRunner.And("OnFailure will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 83
 testRunner.And("OnBeforeRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
 testRunner.And("OnAfterRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
 testRunner.And("AggregateException will be thrown with exactly 5 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Does not cancel finite action on Exception")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Does not cancel finite action on Exception")]
        public virtual void DoesNotCancelFiniteActionOnException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does not cancel finite action on Exception", ((string[])(null)));
#line 87
this.ScenarioSetup(scenarioInfo);
#line 88
 testRunner.Given("I have entered a failing non-returnable operation which fails at step 2 with Null" +
                    "ReferenceException and all others are ArgumentException", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 89
 testRunner.And("I have entered 5 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 90
 testRunner.When("I setup up to fail on Exception for sequential cancellation policy and attempt to" +
                    " run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 91
 testRunner.Then("exactly 5 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 92
 testRunner.And("took around 400 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 93
 testRunner.And("OnFailure will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
 testRunner.And("OnBeforeRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
 testRunner.And("OnAfterRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 96
 testRunner.And("AggregateException will be thrown with exactly 5 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel forever action on ArgumentException")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel forever action on ArgumentException")]
        public virtual void CancelForeverActionOnArgumentException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel forever action on ArgumentException", ((string[])(null)));
#line 99
this.ScenarioSetup(scenarioInfo);
#line 100
 testRunner.Given("I have entered a failing non-returnable operation which fails at step 2 with Argu" +
                    "mentException and all others are Exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 101
 testRunner.And("I have entered 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 102
 testRunner.When("I setup up to fail on ArgumentException for sequential cancellation policy and at" +
                    "tempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 103
 testRunner.Then("exactly 1 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 104
 testRunner.And("took around 100 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 105
 testRunner.And("OnFailure will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 106
 testRunner.And("OnBeforeRetry will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 107
 testRunner.And("OnAfterRetry will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 108
 testRunner.And("AggregateException will be thrown with exactly 2 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel forever action on ArgumentOutOfRangeException")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel forever action on ArgumentOutOfRangeException")]
        public virtual void CancelForeverActionOnArgumentOutOfRangeException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel forever action on ArgumentOutOfRangeException", ((string[])(null)));
#line 110
this.ScenarioSetup(scenarioInfo);
#line 111
 testRunner.Given("I have entered a failing non-returnable operation which fails at step 3 with Argu" +
                    "mentOutOfRangeException and all others are Exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 112
 testRunner.And("I have entered 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 113
 testRunner.When("I setup up to fail on ArgumentOutOfRangeException for sequential cancellation pol" +
                    "icy and attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 114
 testRunner.Then("exactly 2 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 115
 testRunner.And("took around 200 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 116
 testRunner.And("OnFailure will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 117
 testRunner.And("OnBeforeRetry will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 118
 testRunner.And("OnAfterRetry will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 119
 testRunner.And("AggregateException will be thrown with exactly 3 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel forever action on NullReferenceException")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel forever action on NullReferenceException")]
        public virtual void CancelForeverActionOnNullReferenceException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel forever action on NullReferenceException", ((string[])(null)));
#line 121
this.ScenarioSetup(scenarioInfo);
#line 122
 testRunner.Given("I have entered a failing non-returnable operation which fails at step 4 with Null" +
                    "ReferenceException and all others are Exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 123
 testRunner.And("I have entered 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 124
 testRunner.When("I setup up to fail on NullReferenceException for sequential cancellation policy a" +
                    "nd attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 125
 testRunner.Then("exactly 3 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 126
 testRunner.And("took around 300 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 127
 testRunner.And("OnFailure will be dispatched exactly 4 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 128
 testRunner.And("OnBeforeRetry will be dispatched exactly 4 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 129
 testRunner.And("OnAfterRetry will be dispatched exactly 4 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 130
 testRunner.And("AggregateException will be thrown with exactly 4 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel forever action on Exception")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel forever action on Exception")]
        public virtual void CancelForeverActionOnException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel forever action on Exception", ((string[])(null)));
#line 132
this.ScenarioSetup(scenarioInfo);
#line 133
 testRunner.Given("I have entered a failing non-returnable operation which fails at step 2 with Exce" +
                    "ption and all others are ArgumentException", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 134
 testRunner.And("I have entered 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 135
 testRunner.When("I setup up to fail on Exception for sequential cancellation policy and attempt to" +
                    " run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 136
 testRunner.Then("exactly 1 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 137
 testRunner.And("took around 100 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 138
 testRunner.And("OnFailure will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 139
 testRunner.And("OnBeforeRetry will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 140
 testRunner.And("OnAfterRetry will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 141
 testRunner.And("AggregateException will be thrown with exactly 2 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Does not cancel forever action on ArgumentException")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Does not cancel forever action on ArgumentException")]
        public virtual void DoesNotCancelForeverActionOnArgumentException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does not cancel forever action on ArgumentException", ((string[])(null)));
#line 145
this.ScenarioSetup(scenarioInfo);
#line 146
 testRunner.Given("I have entered a failing non-returnable operation which fails at step 2 with Argu" +
                    "mentOutOfRangeException and all others are Exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 147
 testRunner.And("I have entered 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 148
 testRunner.And("stops after 500 milliseconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 149
 testRunner.When("I setup up to fail on ArgumentException for sequential cancellation policy and at" +
                    "tempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 150
 testRunner.Then("exactly 5 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 151
 testRunner.And("took around 500 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 152
 testRunner.And("OnFailure will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 153
 testRunner.And("OnBeforeRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 154
 testRunner.And("OnAfterRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 155
 testRunner.And("AggregateException will be thrown with exactly 5 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Does not cancel forever action on ArgumentOutOfRangeException")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Does not cancel forever action on ArgumentOutOfRangeException")]
        public virtual void DoesNotCancelForeverActionOnArgumentOutOfRangeException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does not cancel forever action on ArgumentOutOfRangeException", ((string[])(null)));
#line 157
this.ScenarioSetup(scenarioInfo);
#line 158
 testRunner.Given("I have entered a failing non-returnable operation which fails at step 2 with Argu" +
                    "mentException and all others are Exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 159
 testRunner.And("I have entered 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 160
 testRunner.And("stops after 500 milliseconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 161
 testRunner.When("I setup up to fail on ArgumentOutOfRangeException for sequential cancellation pol" +
                    "icy and attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 162
 testRunner.Then("exactly 5 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 163
 testRunner.And("took around 500 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 164
 testRunner.And("OnFailure will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 165
 testRunner.And("OnBeforeRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 166
 testRunner.And("OnAfterRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 167
 testRunner.And("AggregateException will be thrown with exactly 5 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Does not cancel forever action on NullReferenceException")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Does not cancel forever action on NullReferenceException")]
        public virtual void DoesNotCancelForeverActionOnNullReferenceException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does not cancel forever action on NullReferenceException", ((string[])(null)));
#line 169
this.ScenarioSetup(scenarioInfo);
#line 170
 testRunner.Given("I have entered a failing non-returnable operation which fails at step 2 with Argu" +
                    "mentOutOfRangeException and all others are Exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 171
 testRunner.And("I have entered 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 172
 testRunner.And("stops after 500 milliseconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 173
 testRunner.When("I setup up to fail on NullReferenceException for sequential cancellation policy a" +
                    "nd attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 174
 testRunner.Then("exactly 5 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 175
 testRunner.And("took around 500 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 176
 testRunner.And("OnFailure will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 177
 testRunner.And("OnBeforeRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 178
 testRunner.And("OnAfterRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 179
 testRunner.And("AggregateException will be thrown with exactly 5 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Does not cancel forever action on Exception")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Does not cancel forever action on Exception")]
        public virtual void DoesNotCancelForeverActionOnException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does not cancel forever action on Exception", ((string[])(null)));
#line 181
this.ScenarioSetup(scenarioInfo);
#line 182
 testRunner.Given("I have entered a failing non-returnable operation which fails at step 2 with Null" +
                    "ReferenceException and all others are ArgumentException", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 183
 testRunner.And("I have entered 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 184
 testRunner.And("stops after 500 milliseconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 185
 testRunner.When("I setup up to fail on Exception for sequential cancellation policy and attempt to" +
                    " run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 186
 testRunner.Then("exactly 5 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 187
 testRunner.And("took around 500 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 188
 testRunner.And("OnFailure will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 189
 testRunner.And("OnBeforeRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 190
 testRunner.And("OnAfterRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 191
 testRunner.And("AggregateException will be thrown with exactly 5 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel finite action after 200 milliseconds")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel finite action after 200 milliseconds")]
        public virtual void CancelFiniteActionAfter200Milliseconds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel finite action after 200 milliseconds", ((string[])(null)));
#line 194
this.ScenarioSetup(scenarioInfo);
#line 195
 testRunner.Given("I have entered a failing non-returnable operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 196
 testRunner.And("I have entered 5 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 197
 testRunner.When("I setup up to fail after 200 milliseconds for sequential cancellation policy and " +
                    "attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 198
 testRunner.Then("exactly 2 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 199
 testRunner.And("took around 200 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 200
 testRunner.And("OnFailure will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 201
 testRunner.And("OnBeforeRetry will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 202
 testRunner.And("OnAfterRetry will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 203
 testRunner.And("AggregateException will be thrown with exactly 2 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel finite action after 600 milliseconds")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel finite action after 600 milliseconds")]
        public virtual void CancelFiniteActionAfter600Milliseconds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel finite action after 600 milliseconds", ((string[])(null)));
#line 205
this.ScenarioSetup(scenarioInfo);
#line 206
 testRunner.Given("I have entered a failing non-returnable operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 207
 testRunner.And("I have entered 15 attempts for 200 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 208
 testRunner.When("I setup up to fail after 600 milliseconds for sequential cancellation policy and " +
                    "attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 209
 testRunner.Then("exactly 3 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 210
 testRunner.And("took around 600 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 211
 testRunner.And("OnFailure will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 212
 testRunner.And("OnBeforeRetry will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 213
 testRunner.And("OnAfterRetry will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 214
 testRunner.And("AggregateException will be thrown with exactly 3 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel finite action after 1500 milliseconds")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel finite action after 1500 milliseconds")]
        public virtual void CancelFiniteActionAfter1500Milliseconds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel finite action after 1500 milliseconds", ((string[])(null)));
#line 216
this.ScenarioSetup(scenarioInfo);
#line 217
 testRunner.Given("I have entered a failing non-returnable operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 218
 testRunner.And("I have entered 15 attempts for 200 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 219
 testRunner.When("I setup up to fail after 1500 milliseconds for sequential cancellation policy and" +
                    " attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 220
 testRunner.Then("exactly 8 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 221
 testRunner.And("took around 1600 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 222
 testRunner.And("OnFailure will be dispatched exactly 8 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 223
 testRunner.And("OnBeforeRetry will be dispatched exactly 8 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 224
 testRunner.And("OnAfterRetry will be dispatched exactly 8 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 225
 testRunner.And("AggregateException will be thrown with exactly 8 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel finite action after 3000 milliseconds")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel finite action after 3000 milliseconds")]
        public virtual void CancelFiniteActionAfter3000Milliseconds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel finite action after 3000 milliseconds", ((string[])(null)));
#line 227
this.ScenarioSetup(scenarioInfo);
#line 228
 testRunner.Given("I have entered a failing non-returnable operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 229
 testRunner.And("I have entered 15 attempts for 430 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 230
 testRunner.When("I setup up to fail after 3000 milliseconds for sequential cancellation policy and" +
                    " attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 231
 testRunner.Then("exactly 7 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 232
 testRunner.And("took around 3010 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 233
 testRunner.And("OnFailure will be dispatched exactly 7 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 234
 testRunner.And("OnBeforeRetry will be dispatched exactly 7 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 235
 testRunner.And("OnAfterRetry will be dispatched exactly 7 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 236
 testRunner.And("AggregateException will be thrown with exactly 7 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel finite action after 5000 milliseconds")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel finite action after 5000 milliseconds")]
        public virtual void CancelFiniteActionAfter5000Milliseconds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel finite action after 5000 milliseconds", ((string[])(null)));
#line 238
this.ScenarioSetup(scenarioInfo);
#line 239
 testRunner.Given("I have entered a failing non-returnable operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 240
 testRunner.And("I have entered 15 attempts for 600 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 241
 testRunner.When("I setup up to fail after 5000 milliseconds for sequential cancellation policy and" +
                    " attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 242
 testRunner.Then("exactly 9 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 243
 testRunner.And("took around 5400 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 244
 testRunner.And("OnFailure will be dispatched exactly 9 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 245
 testRunner.And("OnBeforeRetry will be dispatched exactly 9 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 246
 testRunner.And("OnAfterRetry will be dispatched exactly 9 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 247
 testRunner.And("AggregateException will be thrown with exactly 9 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel forever action after 200 milliseconds")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel forever action after 200 milliseconds")]
        public virtual void CancelForeverActionAfter200Milliseconds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel forever action after 200 milliseconds", ((string[])(null)));
#line 250
this.ScenarioSetup(scenarioInfo);
#line 251
 testRunner.Given("I have entered a failing non-returnable operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 252
 testRunner.And("I have entered 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 253
 testRunner.When("I setup up to fail after 200 milliseconds for sequential cancellation policy and " +
                    "attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 254
 testRunner.Then("exactly 2 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 255
 testRunner.And("took around 200 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 256
 testRunner.And("OnFailure will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 257
 testRunner.And("OnBeforeRetry will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 258
 testRunner.And("OnAfterRetry will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 259
 testRunner.And("AggregateException will be thrown with exactly 2 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel forever action after 600 milliseconds")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel forever action after 600 milliseconds")]
        public virtual void CancelForeverActionAfter600Milliseconds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel forever action after 600 milliseconds", ((string[])(null)));
#line 261
this.ScenarioSetup(scenarioInfo);
#line 262
 testRunner.Given("I have entered a failing non-returnable operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 263
 testRunner.And("I have entered 200 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 264
 testRunner.When("I setup up to fail after 600 milliseconds for sequential cancellation policy and " +
                    "attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 265
 testRunner.Then("exactly 3 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 266
 testRunner.And("took around 600 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 267
 testRunner.And("OnFailure will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 268
 testRunner.And("OnBeforeRetry will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 269
 testRunner.And("OnAfterRetry will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 270
 testRunner.And("AggregateException will be thrown with exactly 3 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel forever action after 1500 milliseconds")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel forever action after 1500 milliseconds")]
        public virtual void CancelForeverActionAfter1500Milliseconds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel forever action after 1500 milliseconds", ((string[])(null)));
#line 272
this.ScenarioSetup(scenarioInfo);
#line 273
 testRunner.Given("I have entered a failing non-returnable operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 274
 testRunner.And("I have entered 200 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 275
 testRunner.When("I setup up to fail after 1500 milliseconds for sequential cancellation policy and" +
                    " attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 276
 testRunner.Then("exactly 8 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 277
 testRunner.And("took around 1600 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 278
 testRunner.And("OnFailure will be dispatched exactly 8 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 279
 testRunner.And("OnBeforeRetry will be dispatched exactly 8 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 280
 testRunner.And("OnAfterRetry will be dispatched exactly 8 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 281
 testRunner.And("AggregateException will be thrown with exactly 8 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel forever action after 3000 milliseconds")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel forever action after 3000 milliseconds")]
        public virtual void CancelForeverActionAfter3000Milliseconds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel forever action after 3000 milliseconds", ((string[])(null)));
#line 283
this.ScenarioSetup(scenarioInfo);
#line 284
 testRunner.Given("I have entered a failing non-returnable operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 285
 testRunner.And("I have entered 430 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 286
 testRunner.When("I setup up to fail after 3000 milliseconds for sequential cancellation policy and" +
                    " attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 287
 testRunner.Then("exactly 7 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 288
 testRunner.And("took around 3010 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 289
 testRunner.And("OnFailure will be dispatched exactly 7 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 290
 testRunner.And("OnBeforeRetry will be dispatched exactly 7 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 291
 testRunner.And("OnAfterRetry will be dispatched exactly 7 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 292
 testRunner.And("AggregateException will be thrown with exactly 7 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel forever action after 5000 milliseconds")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel forever action after 5000 milliseconds")]
        public virtual void CancelForeverActionAfter5000Milliseconds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel forever action after 5000 milliseconds", ((string[])(null)));
#line 294
this.ScenarioSetup(scenarioInfo);
#line 295
 testRunner.Given("I have entered a failing non-returnable operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 296
 testRunner.And("I have entered 600 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 297
 testRunner.When("I setup up to fail after 5000 milliseconds for sequential cancellation policy and" +
                    " attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 298
 testRunner.Then("exactly 9 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 299
 testRunner.And("took around 5400 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 300
 testRunner.And("OnFailure will be dispatched exactly 9 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 301
 testRunner.And("OnBeforeRetry will be dispatched exactly 9 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 302
 testRunner.And("OnAfterRetry will be dispatched exactly 9 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 303
 testRunner.And("AggregateException will be thrown with exactly 9 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel finite function on ArgumentException")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel finite function on ArgumentException")]
        public virtual void CancelFiniteFunctionOnArgumentException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel finite function on ArgumentException", ((string[])(null)));
#line 307
this.ScenarioSetup(scenarioInfo);
#line 308
 testRunner.Given("I have entered a failing returnable operation which fails at step 2 with Argument" +
                    "Exception and all others are Exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 309
 testRunner.And("I have entered 5 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 310
 testRunner.When("I setup up to fail on ArgumentException for sequential cancellation policy and at" +
                    "tempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 311
 testRunner.Then("exactly 1 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 312
 testRunner.And("took around 100 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 313
 testRunner.And("OnFailure will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 314
 testRunner.And("OnBeforeRetry will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 315
 testRunner.And("OnAfterRetry will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 316
 testRunner.And("AggregateException will be thrown with exactly 2 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel finite function on ArgumentOutOfRangeException")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel finite function on ArgumentOutOfRangeException")]
        public virtual void CancelFiniteFunctionOnArgumentOutOfRangeException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel finite function on ArgumentOutOfRangeException", ((string[])(null)));
#line 318
this.ScenarioSetup(scenarioInfo);
#line 319
 testRunner.Given("I have entered a failing returnable operation which fails at step 3 with Argument" +
                    "OutOfRangeException and all others are Exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 320
 testRunner.And("I have entered 5 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 321
 testRunner.When("I setup up to fail on ArgumentOutOfRangeException for sequential cancellation pol" +
                    "icy and attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 322
 testRunner.Then("exactly 2 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 323
 testRunner.And("took around 200 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 324
 testRunner.And("OnFailure will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 325
 testRunner.And("OnBeforeRetry will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 326
 testRunner.And("OnAfterRetry will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 327
 testRunner.And("AggregateException will be thrown with exactly 3 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel finite function on NullReferenceException")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel finite function on NullReferenceException")]
        public virtual void CancelFiniteFunctionOnNullReferenceException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel finite function on NullReferenceException", ((string[])(null)));
#line 329
this.ScenarioSetup(scenarioInfo);
#line 330
 testRunner.Given("I have entered a failing returnable operation which fails at step 4 with NullRefe" +
                    "renceException and all others are Exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 331
 testRunner.And("I have entered 5 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 332
 testRunner.When("I setup up to fail on NullReferenceException for sequential cancellation policy a" +
                    "nd attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 333
 testRunner.Then("exactly 3 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 334
 testRunner.And("took around 300 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 335
 testRunner.And("OnFailure will be dispatched exactly 4 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 336
 testRunner.And("OnBeforeRetry will be dispatched exactly 4 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 337
 testRunner.And("OnAfterRetry will be dispatched exactly 4 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 338
 testRunner.And("AggregateException will be thrown with exactly 4 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel finite function on Exception")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel finite function on Exception")]
        public virtual void CancelFiniteFunctionOnException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel finite function on Exception", ((string[])(null)));
#line 340
this.ScenarioSetup(scenarioInfo);
#line 341
 testRunner.Given("I have entered a failing returnable operation which fails at step 2 with Exceptio" +
                    "n and all others are ArgumentException", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 342
 testRunner.And("I have entered 5 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 343
 testRunner.When("I setup up to fail on Exception for sequential cancellation policy and attempt to" +
                    " run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 344
 testRunner.Then("exactly 1 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 345
 testRunner.And("took around 100 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 346
 testRunner.And("OnFailure will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 347
 testRunner.And("OnBeforeRetry will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 348
 testRunner.And("OnAfterRetry will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 349
 testRunner.And("AggregateException will be thrown with exactly 2 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Does not cancel finite function on ArgumentException")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Does not cancel finite function on ArgumentException")]
        public virtual void DoesNotCancelFiniteFunctionOnArgumentException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does not cancel finite function on ArgumentException", ((string[])(null)));
#line 352
this.ScenarioSetup(scenarioInfo);
#line 353
 testRunner.Given("I have entered a failing returnable operation which fails at step 2 with Argument" +
                    "OutOfRangeException and all others are Exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 354
 testRunner.And("I have entered 5 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 355
 testRunner.When("I setup up to fail on ArgumentException for sequential cancellation policy and at" +
                    "tempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 356
 testRunner.Then("exactly 5 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 357
 testRunner.And("took around 400 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 358
 testRunner.And("OnFailure will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 359
 testRunner.And("OnBeforeRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 360
 testRunner.And("OnAfterRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 361
 testRunner.And("AggregateException will be thrown with exactly 5 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Does not cancel finite function on ArgumentOutOfRangeException")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Does not cancel finite function on ArgumentOutOfRangeException")]
        public virtual void DoesNotCancelFiniteFunctionOnArgumentOutOfRangeException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does not cancel finite function on ArgumentOutOfRangeException", ((string[])(null)));
#line 363
this.ScenarioSetup(scenarioInfo);
#line 364
 testRunner.Given("I have entered a failing returnable operation which fails at step 2 with Argument" +
                    "Exception and all others are Exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 365
 testRunner.And("I have entered 5 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 366
 testRunner.When("I setup up to fail on ArgumentOutOfRangeException for sequential cancellation pol" +
                    "icy and attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 367
 testRunner.Then("exactly 5 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 368
 testRunner.And("took around 400 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 369
 testRunner.And("OnFailure will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 370
 testRunner.And("OnBeforeRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 371
 testRunner.And("OnAfterRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 372
 testRunner.And("AggregateException will be thrown with exactly 5 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Does not cancel finite function on NullReferenceException")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Does not cancel finite function on NullReferenceException")]
        public virtual void DoesNotCancelFiniteFunctionOnNullReferenceException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does not cancel finite function on NullReferenceException", ((string[])(null)));
#line 374
this.ScenarioSetup(scenarioInfo);
#line 375
 testRunner.Given("I have entered a failing returnable operation which fails at step 2 with Argument" +
                    "OutOfRangeException and all others are Exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 376
 testRunner.And("I have entered 5 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 377
 testRunner.When("I setup up to fail on NullReferenceException for sequential cancellation policy a" +
                    "nd attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 378
 testRunner.Then("exactly 5 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 379
 testRunner.And("took around 400 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 380
 testRunner.And("OnFailure will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 381
 testRunner.And("OnBeforeRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 382
 testRunner.And("OnAfterRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 383
 testRunner.And("AggregateException will be thrown with exactly 5 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Does not cancel finite function on Exception")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Does not cancel finite function on Exception")]
        public virtual void DoesNotCancelFiniteFunctionOnException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does not cancel finite function on Exception", ((string[])(null)));
#line 385
this.ScenarioSetup(scenarioInfo);
#line 386
 testRunner.Given("I have entered a failing returnable operation which fails at step 2 with NullRefe" +
                    "renceException and all others are ArgumentException", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 387
 testRunner.And("I have entered 5 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 388
 testRunner.When("I setup up to fail on Exception for sequential cancellation policy and attempt to" +
                    " run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 389
 testRunner.Then("exactly 5 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 390
 testRunner.And("took around 400 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 391
 testRunner.And("OnFailure will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 392
 testRunner.And("OnBeforeRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 393
 testRunner.And("OnAfterRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 394
 testRunner.And("AggregateException will be thrown with exactly 5 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel forever function on ArgumentException")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel forever function on ArgumentException")]
        public virtual void CancelForeverFunctionOnArgumentException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel forever function on ArgumentException", ((string[])(null)));
#line 397
this.ScenarioSetup(scenarioInfo);
#line 398
 testRunner.Given("I have entered a failing returnable operation which fails at step 2 with Argument" +
                    "Exception and all others are Exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 399
 testRunner.And("I have entered 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 400
 testRunner.When("I setup up to fail on ArgumentException for sequential cancellation policy and at" +
                    "tempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 401
 testRunner.Then("exactly 1 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 402
 testRunner.And("took around 100 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 403
 testRunner.And("OnFailure will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 404
 testRunner.And("OnBeforeRetry will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 405
 testRunner.And("OnAfterRetry will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 406
 testRunner.And("AggregateException will be thrown with exactly 2 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel forever function on ArgumentOutOfRangeException")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel forever function on ArgumentOutOfRangeException")]
        public virtual void CancelForeverFunctionOnArgumentOutOfRangeException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel forever function on ArgumentOutOfRangeException", ((string[])(null)));
#line 408
this.ScenarioSetup(scenarioInfo);
#line 409
 testRunner.Given("I have entered a failing returnable operation which fails at step 3 with Argument" +
                    "OutOfRangeException and all others are Exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 410
 testRunner.And("I have entered 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 411
 testRunner.When("I setup up to fail on ArgumentOutOfRangeException for sequential cancellation pol" +
                    "icy and attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 412
 testRunner.Then("exactly 2 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 413
 testRunner.And("took around 200 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 414
 testRunner.And("OnFailure will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 415
 testRunner.And("OnBeforeRetry will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 416
 testRunner.And("OnAfterRetry will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 417
 testRunner.And("AggregateException will be thrown with exactly 3 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel forever function on NullReferenceException")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel forever function on NullReferenceException")]
        public virtual void CancelForeverFunctionOnNullReferenceException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel forever function on NullReferenceException", ((string[])(null)));
#line 419
this.ScenarioSetup(scenarioInfo);
#line 420
 testRunner.Given("I have entered a failing returnable operation which fails at step 4 with NullRefe" +
                    "renceException and all others are Exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 421
 testRunner.And("I have entered 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 422
 testRunner.When("I setup up to fail on NullReferenceException for sequential cancellation policy a" +
                    "nd attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 423
 testRunner.Then("exactly 3 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 424
 testRunner.And("took around 300 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 425
 testRunner.And("OnFailure will be dispatched exactly 4 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 426
 testRunner.And("OnBeforeRetry will be dispatched exactly 4 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 427
 testRunner.And("OnAfterRetry will be dispatched exactly 4 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 428
 testRunner.And("AggregateException will be thrown with exactly 4 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel forever function on Exception")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel forever function on Exception")]
        public virtual void CancelForeverFunctionOnException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel forever function on Exception", ((string[])(null)));
#line 430
this.ScenarioSetup(scenarioInfo);
#line 431
 testRunner.Given("I have entered a failing returnable operation which fails at step 2 with Exceptio" +
                    "n and all others are ArgumentException", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 432
 testRunner.And("I have entered 1500 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 433
 testRunner.When("I setup up to fail on Exception for sequential cancellation policy and attempt to" +
                    " run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 434
 testRunner.Then("exactly 1 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 435
 testRunner.And("took around 1500 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 436
 testRunner.And("OnFailure will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 437
 testRunner.And("OnBeforeRetry will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 438
 testRunner.And("OnAfterRetry will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 439
 testRunner.And("AggregateException will be thrown with exactly 2 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Does not cancel forever function on ArgumentException")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Does not cancel forever function on ArgumentException")]
        public virtual void DoesNotCancelForeverFunctionOnArgumentException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does not cancel forever function on ArgumentException", ((string[])(null)));
#line 443
this.ScenarioSetup(scenarioInfo);
#line 444
 testRunner.Given("I have entered a failing returnable operation which fails at step 2 with Argument" +
                    "OutOfRangeException and all others are Exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 445
 testRunner.And("I have entered 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 446
 testRunner.And("stops after 500 milliseconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 447
 testRunner.When("I setup up to fail on ArgumentException for sequential cancellation policy and at" +
                    "tempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 448
 testRunner.Then("exactly 5 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 449
 testRunner.And("took around 500 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 450
 testRunner.And("OnFailure will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 451
 testRunner.And("OnBeforeRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 452
 testRunner.And("OnAfterRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 453
 testRunner.And("AggregateException will be thrown with exactly 5 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Does not cancel forever function on ArgumentOutOfRangeException")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Does not cancel forever function on ArgumentOutOfRangeException")]
        public virtual void DoesNotCancelForeverFunctionOnArgumentOutOfRangeException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does not cancel forever function on ArgumentOutOfRangeException", ((string[])(null)));
#line 455
this.ScenarioSetup(scenarioInfo);
#line 456
 testRunner.Given("I have entered a failing returnable operation which fails at step 2 with Argument" +
                    "Exception and all others are Exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 457
 testRunner.And("I have entered 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 458
 testRunner.And("stops after 500 milliseconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 459
 testRunner.When("I setup up to fail on ArgumentOutOfRangeException for sequential cancellation pol" +
                    "icy and attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 460
 testRunner.Then("exactly 5 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 461
 testRunner.And("took around 500 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 462
 testRunner.And("OnFailure will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 463
 testRunner.And("OnBeforeRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 464
 testRunner.And("OnAfterRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 465
 testRunner.And("AggregateException will be thrown with exactly 5 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Does not cancel forever function on NullReferenceException")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Does not cancel forever function on NullReferenceException")]
        public virtual void DoesNotCancelForeverFunctionOnNullReferenceException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does not cancel forever function on NullReferenceException", ((string[])(null)));
#line 467
this.ScenarioSetup(scenarioInfo);
#line 468
 testRunner.Given("I have entered a failing returnable operation which fails at step 2 with Argument" +
                    "OutOfRangeException and all others are Exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 469
 testRunner.And("I have entered 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 470
 testRunner.And("stops after 500 milliseconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 471
 testRunner.When("I setup up to fail on NullReferenceException for sequential cancellation policy a" +
                    "nd attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 472
 testRunner.Then("exactly 5 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 473
 testRunner.And("took around 500 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 474
 testRunner.And("OnFailure will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 475
 testRunner.And("OnBeforeRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 476
 testRunner.And("OnAfterRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 477
 testRunner.And("AggregateException will be thrown with exactly 5 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Does not cancel forever function on Exception")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Does not cancel forever function on Exception")]
        public virtual void DoesNotCancelForeverFunctionOnException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Does not cancel forever function on Exception", ((string[])(null)));
#line 479
this.ScenarioSetup(scenarioInfo);
#line 480
 testRunner.Given("I have entered a failing returnable operation which fails at step 2 with NullRefe" +
                    "renceException and all others are ArgumentException", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 481
 testRunner.And("I have entered 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 482
 testRunner.And("stops after 500 milliseconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 483
 testRunner.When("I setup up to fail on Exception for sequential cancellation policy and attempt to" +
                    " run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 484
 testRunner.Then("exactly 5 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 485
 testRunner.And("took around 500 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 486
 testRunner.And("OnFailure will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 487
 testRunner.And("OnBeforeRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 488
 testRunner.And("OnAfterRetry will be dispatched exactly 5 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 489
 testRunner.And("AggregateException will be thrown with exactly 5 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel finite function after 200 milliseconds")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel finite function after 200 milliseconds")]
        public virtual void CancelFiniteFunctionAfter200Milliseconds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel finite function after 200 milliseconds", ((string[])(null)));
#line 492
this.ScenarioSetup(scenarioInfo);
#line 493
 testRunner.Given("I have entered a failing returnable operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 494
 testRunner.And("I have entered 5 attempts for 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 495
 testRunner.When("I setup up to fail after 200 milliseconds for sequential cancellation policy and " +
                    "attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 496
 testRunner.Then("exactly 2 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 497
 testRunner.And("took around 200 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 498
 testRunner.And("OnFailure will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 499
 testRunner.And("OnBeforeRetry will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 500
 testRunner.And("OnAfterRetry will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 501
 testRunner.And("AggregateException will be thrown with exactly 2 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel finite function after 600 milliseconds")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel finite function after 600 milliseconds")]
        public virtual void CancelFiniteFunctionAfter600Milliseconds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel finite function after 600 milliseconds", ((string[])(null)));
#line 503
this.ScenarioSetup(scenarioInfo);
#line 504
 testRunner.Given("I have entered a failing returnable operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 505
 testRunner.And("I have entered 15 attempts for 200 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 506
 testRunner.When("I setup up to fail after 600 milliseconds for sequential cancellation policy and " +
                    "attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 507
 testRunner.Then("exactly 3 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 508
 testRunner.And("took around 600 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 509
 testRunner.And("OnFailure will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 510
 testRunner.And("OnBeforeRetry will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 511
 testRunner.And("OnAfterRetry will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 512
 testRunner.And("AggregateException will be thrown with exactly 3 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel finite function after 1500 milliseconds")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel finite function after 1500 milliseconds")]
        public virtual void CancelFiniteFunctionAfter1500Milliseconds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel finite function after 1500 milliseconds", ((string[])(null)));
#line 514
this.ScenarioSetup(scenarioInfo);
#line 515
 testRunner.Given("I have entered a failing returnable operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 516
 testRunner.And("I have entered 15 attempts for 200 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 517
 testRunner.When("I setup up to fail after 1500 milliseconds for sequential cancellation policy and" +
                    " attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 518
 testRunner.Then("exactly 8 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 519
 testRunner.And("took around 1600 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 520
 testRunner.And("OnFailure will be dispatched exactly 8 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 521
 testRunner.And("OnBeforeRetry will be dispatched exactly 8 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 522
 testRunner.And("OnAfterRetry will be dispatched exactly 8 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 523
 testRunner.And("AggregateException will be thrown with exactly 8 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel finite function after 3000 milliseconds")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel finite function after 3000 milliseconds")]
        public virtual void CancelFiniteFunctionAfter3000Milliseconds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel finite function after 3000 milliseconds", ((string[])(null)));
#line 525
this.ScenarioSetup(scenarioInfo);
#line 526
 testRunner.Given("I have entered a failing returnable operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 527
 testRunner.And("I have entered 15 attempts for 430 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 528
 testRunner.When("I setup up to fail after 3000 milliseconds for sequential cancellation policy and" +
                    " attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 529
 testRunner.Then("exactly 7 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 530
 testRunner.And("took around 3010 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 531
 testRunner.And("OnFailure will be dispatched exactly 7 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 532
 testRunner.And("OnBeforeRetry will be dispatched exactly 7 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 533
 testRunner.And("OnAfterRetry will be dispatched exactly 7 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 534
 testRunner.And("AggregateException will be thrown with exactly 7 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel finite function after 5000 milliseconds")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel finite function after 5000 milliseconds")]
        public virtual void CancelFiniteFunctionAfter5000Milliseconds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel finite function after 5000 milliseconds", ((string[])(null)));
#line 536
this.ScenarioSetup(scenarioInfo);
#line 537
 testRunner.Given("I have entered a failing returnable operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 538
 testRunner.And("I have entered 15 attempts for 600 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 539
 testRunner.When("I setup up to fail after 5000 milliseconds for sequential cancellation policy and" +
                    " attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 540
 testRunner.Then("exactly 9 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 541
 testRunner.And("took around 5400 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 542
 testRunner.And("OnFailure will be dispatched exactly 9 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 543
 testRunner.And("OnBeforeRetry will be dispatched exactly 9 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 544
 testRunner.And("OnAfterRetry will be dispatched exactly 9 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 545
 testRunner.And("AggregateException will be thrown with exactly 9 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel forever function after 200 milliseconds")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel forever function after 200 milliseconds")]
        public virtual void CancelForeverFunctionAfter200Milliseconds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel forever function after 200 milliseconds", ((string[])(null)));
#line 548
this.ScenarioSetup(scenarioInfo);
#line 549
 testRunner.Given("I have entered a failing returnable operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 550
 testRunner.And("I have entered 100 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 551
 testRunner.When("I setup up to fail after 200 milliseconds for sequential cancellation policy and " +
                    "attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 552
 testRunner.Then("exactly 2 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 553
 testRunner.And("took around 200 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 554
 testRunner.And("OnFailure will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 555
 testRunner.And("OnBeforeRetry will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 556
 testRunner.And("OnAfterRetry will be dispatched exactly 2 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 557
 testRunner.And("AggregateException will be thrown with exactly 2 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel forever function after 600 milliseconds")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel forever function after 600 milliseconds")]
        public virtual void CancelForeverFunctionAfter600Milliseconds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel forever function after 600 milliseconds", ((string[])(null)));
#line 559
this.ScenarioSetup(scenarioInfo);
#line 560
 testRunner.Given("I have entered a failing returnable operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 561
 testRunner.And("I have entered 200 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 562
 testRunner.When("I setup up to fail after 600 milliseconds for sequential cancellation policy and " +
                    "attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 563
 testRunner.Then("exactly 3 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 564
 testRunner.And("took around 600 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 565
 testRunner.And("OnFailure will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 566
 testRunner.And("OnBeforeRetry will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 567
 testRunner.And("OnAfterRetry will be dispatched exactly 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 568
 testRunner.And("AggregateException will be thrown with exactly 3 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel forever function after 1500 milliseconds")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel forever function after 1500 milliseconds")]
        public virtual void CancelForeverFunctionAfter1500Milliseconds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel forever function after 1500 milliseconds", ((string[])(null)));
#line 570
this.ScenarioSetup(scenarioInfo);
#line 571
 testRunner.Given("I have entered a failing returnable operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 572
 testRunner.And("I have entered 200 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 573
 testRunner.When("I setup up to fail after 1500 milliseconds for sequential cancellation policy and" +
                    " attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 574
 testRunner.Then("exactly 8 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 575
 testRunner.And("took around 1600 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 576
 testRunner.And("OnFailure will be dispatched exactly 8 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 577
 testRunner.And("OnBeforeRetry will be dispatched exactly 8 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 578
 testRunner.And("OnAfterRetry will be dispatched exactly 8 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 579
 testRunner.And("AggregateException will be thrown with exactly 8 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel forever function after 3000 milliseconds")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel forever function after 3000 milliseconds")]
        public virtual void CancelForeverFunctionAfter3000Milliseconds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel forever function after 3000 milliseconds", ((string[])(null)));
#line 581
this.ScenarioSetup(scenarioInfo);
#line 582
 testRunner.Given("I have entered a failing returnable operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 583
 testRunner.And("I have entered 430 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 584
 testRunner.When("I setup up to fail after 3000 milliseconds for sequential cancellation policy and" +
                    " attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 585
 testRunner.Then("exactly 7 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 586
 testRunner.And("took around 3010 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 587
 testRunner.And("OnFailure will be dispatched exactly 7 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 588
 testRunner.And("OnBeforeRetry will be dispatched exactly 7 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 589
 testRunner.And("OnAfterRetry will be dispatched exactly 7 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 590
 testRunner.And("AggregateException will be thrown with exactly 7 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cancel forever function after 5000 milliseconds")]
        [Xunit.TraitAttribute("FeatureTitle", "Cancellable retries")]
        [Xunit.TraitAttribute("Description", "Cancel forever function after 5000 milliseconds")]
        public virtual void CancelForeverFunctionAfter5000Milliseconds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel forever function after 5000 milliseconds", ((string[])(null)));
#line 592
this.ScenarioSetup(scenarioInfo);
#line 593
 testRunner.Given("I have entered a failing returnable operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 594
 testRunner.And("I have entered 600 milliseconds between", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 595
 testRunner.When("I setup up to fail after 5000 milliseconds for sequential cancellation policy and" +
                    " attempt to run operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 596
 testRunner.Then("exactly 9 retry should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 597
 testRunner.And("took around 5400 milliseconds in total", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 598
 testRunner.And("OnFailure will be dispatched exactly 9 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 599
 testRunner.And("OnBeforeRetry will be dispatched exactly 9 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 600
 testRunner.And("OnAfterRetry will be dispatched exactly 9 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 601
 testRunner.And("AggregateException will be thrown with exactly 9 inner exceptions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CancellableRetriesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CancellableRetriesFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
